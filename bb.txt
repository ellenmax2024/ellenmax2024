'''
test if works
'''

class SSH(object):
    '''
    This class represents the SSH client to connect the server and execute the command.
    '''

    connections=Queue()

    def __init__(self, hostname, username, password, port=22):
        super(SSH, self).__init__()
        self.hostname = hostname
        self.port = port
        self.username = username
        self.password = password
        self._sshClient = None
        self._pyt_session = None

    def __connect(self):
        try:
            self._sshClient = paramiko.SSHClient()
            SSH.connections.put(self._sshClient)
            self._sshClient.set_missing_host_key_policy(paramiko.AutoAddPolicy())
           try:
                self._sshClient.connect(self.hostname, self.port, username=self.username, password=self.password, allow_agent=False, look_for_keys=False)
            except:
                self._sshClient.connect(self.hostname, self.port, username=self.username, password=self.password)
            logger.info("hostname:"+self.hostname)
            logger.info("username:"+self.username)
            logger.info("password:"+self.password)
            logger.info("port:"+str(self.port))
        except AuthenticationException:
            logger.error('connect fails by the authentication failure, please confirm your account information.')
            raise Exception("connect fails by the authentication failure, please confirm your account information.")
        except SSHException:
            logger.error('there was any other error connecting or establishing an SSH session.')
            raise Exception('there was any other error connecting or establishing an SSH session.')
        except socket.error:
            logger.error('socket error occurred while connecting.')
            raise Exception('socket error occurred while connecting.')
    @step
    def exec_command(self, cmd, stop_on_error=True, collect_report=True, time_out=None):
        """
        Execute one command.
        """
        if self._sshClient == None:
            self.__connect()

        stdin, stdout, stderr = self._sshClient.exec_command(cmd, timeout=time_out)
        data = stdout.read()
#         if len(data) > 0:
#             logger.info("execution result :"+data)
#             return data
#
        err = stderr.read()

        logger.info("stdout:"+data.decode())
        logger.info("stderr:"+err.decode())

        if len(err) > 0:
            return err
        else:
            return data




